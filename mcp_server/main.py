# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T14:57:07+00:00



import argparse
import json
import os
from typing import *
from typing import Union

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import APIKeyHeader, BaseSecurity

from models import (
    V1IecIecGetResponse,
    V1IecIecGetResponse1,
    V1IecIecGetResponse2,
    V1IecIecGetResponse3,
    V1IecIecGetResponse4,
    V1IecIecGetResponse5,
    V1IecIecGetResponse6,
    V1IecIecGetResponse7,
)

app = MCPProxy(
    contact={
        'name': 'Directorate General of Foreign Trade (DGFT)',
        'url': 'https://www.dgft.gov.in/',
    },
    description='The Importer-Exporter Code (IEC), issued by Directorate General of Foreign Trade (DGFT), is a key business identification number which is mandatory for Exports or Imports. This API can be used to get details of a importer-exporter by importer-exporter code.',
    termsOfService='https://ndh.digitallocker.gov.in/terms.php',
    title='Importer-Exporter Details API',
    version='3.0.0',
    servers=[{'url': 'https://apisetu.gov.in/dgft'}],
)


@app.get(
    '/v1/iec/{iec}',
    description=""" Description of Importer-Exporter Code (IEC) Verification API. """,
    tags=['iec_verification'],
    security=[
        APIKeyHeader(name="X-APISETU-APIKEY"),
        APIKeyHeader(name="X-APISETU-CLIENTID"),
    ],
)
def importer__exporter__code__verification__a_p_i(iec: str):
    """
    Importer-Exporter Code (IEC) Verification API.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
