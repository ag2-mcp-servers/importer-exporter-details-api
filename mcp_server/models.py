# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T14:57:07+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import List, Optional

from pydantic import BaseModel, Field, constr


class BranchItem(BaseModel):
    badd1: constr(min_length=1) = Field(..., examples=['Bokaro'])
    badd2: str = Field(..., examples=[''])
    branchCode: constr(min_length=1) = Field(..., examples=[1])
    city: constr(min_length=1) = Field(..., examples=['Bokaro'])
    pin: constr(min_length=1) = Field(..., examples=[827012])
    state: constr(min_length=1) = Field(..., examples=['JHARKHAND'])


class Director(BaseModel):
    name: constr(min_length=1) = Field(..., examples=["Mukund's IEC"])


class V1IecIecGetResponse(BaseModel):
    addressLine1: constr(min_length=1) = Field(..., examples=['Noida'])
    addressLine2: str = Field(..., examples=[''])
    branch: List[BranchItem] = Field(..., min_length=1)
    city: constr(min_length=1) = Field(..., examples=['Bokaro'])
    dataAsOn: datetime
    directors: List[Director] = Field(..., min_length=1)
    entityName: constr(min_length=1) = Field(..., examples=["Mukund's IEC"])
    exporterType: constr(min_length=1) = Field(..., examples=[1])
    iec: constr(min_length=1) = Field(..., examples=['CGRPK3746C'])
    iecIssueDate: constr(min_length=1) = Field(..., examples=[8062020])
    iecModificationDate: str = Field(..., examples=[''])
    iecStatus: constr(min_length=0) = Field(..., examples=[0])
    natureOfConcern: constr(min_length=1) = Field(..., examples=[1])
    pan: constr(min_length=1) = Field(..., examples=['CGRPK3746CFT001'])
    pin: constr(min_length=1) = Field(..., examples=[827012])
    state: constr(min_length=1) = Field(..., examples=['JHARKHAND'])


class Error(Enum):
    invalid_parameter = 'invalid parameter'
    missing_parameter = 'missing parameter'


class ErrorDescription(Enum):
    Bad_request = 'Bad request'
    Please_provide_all_mandatory_parameters_ = (
        'Please provide all mandatory parameters.'
    )


class V1IecIecGetResponse1(BaseModel):
    error: Optional[Error] = None
    errorDescription: Optional[ErrorDescription] = None


class Error1(Enum):
    invalid_authentication = 'invalid_authentication'
    invalid_authorization = 'invalid_authorization'


class ErrorDescription1(Enum):
    Authentication_failed = 'Authentication failed'
    You_are_not_authorized_to_use_this_API = 'You are not authorized to use this API'


class V1IecIecGetResponse2(BaseModel):
    error: Optional[Error1] = None
    errorDescription: Optional[ErrorDescription1] = None


class Error2(Enum):
    record_not_found = 'record_not_found'
    Url_not_found = 'Url not found'


class ErrorDescription2(Enum):
    No_record_found = 'No record found'
    Your_API_url_or_path_is_incorrect_ = 'Your API url or path is incorrect.'


class V1IecIecGetResponse3(BaseModel):
    error: Optional[Error2] = None
    errorDescription: Optional[ErrorDescription2] = None


class Error3(Enum):
    internal_server_error = 'internal_server_error'


class ErrorDescription3(Enum):
    Internal_server_error = 'Internal server error'


class V1IecIecGetResponse4(BaseModel):
    error: Optional[Error3] = None
    errorDescription: Optional[ErrorDescription3] = None


class Error4(Enum):
    bad_gateway = 'bad gateway'


class ErrorDescription4(Enum):
    Publisher_service_returned_an_invalid_response_ = (
        'Publisher service returned an invalid response.'
    )


class V1IecIecGetResponse5(BaseModel):
    error: Optional[Error4] = None
    errorDescription: Optional[ErrorDescription4] = None


class Error5(Enum):
    service_unavailable = 'service_unavailable'


class ErrorDescription5(Enum):
    Publisher_service_is_temporarily_unavailable = (
        'Publisher service is temporarily unavailable'
    )


class V1IecIecGetResponse6(BaseModel):
    error: Optional[Error5] = None
    errorDescription: Optional[ErrorDescription5] = None


class Error6(Enum):
    gateway_timeout = 'gateway_timeout'


class ErrorDescription6(Enum):
    Publisher_service_did_not_respond_in_time = (
        'Publisher service did not respond in time'
    )


class V1IecIecGetResponse7(BaseModel):
    error: Optional[Error6] = None
    errorDescription: Optional[ErrorDescription6] = None
